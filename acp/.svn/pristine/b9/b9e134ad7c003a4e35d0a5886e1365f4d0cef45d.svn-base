<?php
	defined('BASEPATH') OR exit('No direct script access allowed');

	class Bbs_tag extends Acp_Controller {

		public $site_url;
		public $base_url;

		public function __construct(){
			parent::__construct();
			$this->load->model('bbs_tag_model');

			$this->load->helper('url');
			$this->load->helper('bbs_common');
			$this->base_url = base_url();
			$this->site_url = site_url();
			$vars = array(
						'base_url' => $this->base_url,
						'site_url' => $this->site_url
					);
			$this->load->vars($vars);
		}
		
		/**
		 *
		 * 	组织结构
		 *
		 */
		public function relation()
		{
			$submit = $this->input->post('submit');
			if ($submit)
			{

				// 因为只能搜索出一个，所以必须是 '名字完全匹配'
				$tag_name = (string) $this->input->post('tag_name');
				if(empty($tag_name)){
					md_common::display_javascript('标签不能为空');
				}
				$tag_id = $this->bbs_tag_model->get_tag_id_by_tag_name($tag_name);
				if(empty($tag_id)){
					md_common::display_javascript('当前标签不存在','/bbs_tag/relation');
				}
				$relative_tag_list = $this->bbs_tag_model->get_relative_tags($tag_name);
				$data = $this->bbs_tag_model->get_tag_relation($tag_id, $tag_name);
				if($data === FALSE){
					$flag = FALSE;
				}else{
					$flag = TRUE;
				}
				$data['flag'] = $flag;
				$data['relative_tag_list'] = $relative_tag_list;
				$this->load->view('bbs_tag/relation', $data);
			} else {
				$this->load->view('bbs_tag/relation_init');
			}
		}

		/**
		 *
		 * 	查看标签
		 *	@param 			int 			$tag_id
		 * 	
		 */
		public function view_tag($tag_id)
		{
			$tag_info = $this->bbs_tag_model->get_tag_info($tag_id);
			if($tag_info){
				$tag_info['final_icon_url'] = cdn_url($tag_info['icon_url']);
			}
			$str = <<<EOF
					<div class="form-group">
					    <label class="col-sm-2 control-label" for="tag_name">标签名</label>
					    <div class="col-sm-10">
					    	<input class="form-control" type="text" disabled value="{$tag_info['tag_name']}">
					    </div>
					</div>
					<div class="form-group">
					    <label class="col-sm-2 control-label" for="description">标签描述</label>
					    <div class="col-sm-10">
					    	<textarea row="5" class="form-control" disabled>{$tag_info['description']}</textarea>
					    </div>
					</div>
					<div class="form-group">
					    <label class="col-sm-2 control-label" for="tag_name">标签图标</label>
					    <div class="col-sm-10">
					    	<img src="{$tag_info['final_icon_url']}" >
					    </div>
					</div>
EOF;
			echo $str;
		}

		/**
		 *
		 * 	编辑标签
		 *	@param 			int 			$tag_id
		 * 	
		 */
		public function edit_tag($tag_id)
		{
			$submit = $this->input->post('submit');
			if(!$submit){
				$tag_info = $this->bbs_tag_model->get_tag_info($tag_id);
				if($tag_info){
					if($tag_info['icon_url']){
						$tag_info['final_icon_url'] = cdn_url($tag_info['icon_url']);
					}else{
						$tag_info['final_icon_url'] = '';
					}
				}
				$vars = array(
							'tag_info' => $tag_info
						);
				$this->load->view('bbs_tag/edit_tag', $vars);
			}else{
				$tag_name = trim($this->input->post('tag_name'));
				$description = trim($this->input->post('description'));
				$prev_tag_name = $this->input->post('prev_tag_name');
				$prev_description = $this->input->post('prev_description');
				$prev_icon_url = $this->input->post('prev_icon_url');
				$input_file_name = 'icon';

				// 标签名不能为空
				if(empty($tag_name)){
					echo "<script>alert('标签不能为空！');window.history.go('-1')</script>";
					exit();
				}

				// 这里先使用bbs_strlen()，中文字和英文字都当成一个字符来处理
				if(bbs_strlen($tag_name) > 16){
					echo "<script>alert('简介不能超过16字');window.history.go('-1')</script>";
					exit();
				}

				// 表示并未进行任何改动
				if(($tag_name == $prev_tag_name) && ($description == $prev_description) && !$_FILES[$input_file_name]['name']){
					echo "<script>alert('并未进行任何修改!');window.history.go('-1')</script>";
					exit;
				}

				// 只有当2次标签名，不同的时候，才会进行验证标签是否存在
				if($tag_name != $prev_tag_name){
					$is_tag_exists = $this->bbs_tag_model->is_tag_exists($tag_name);
					if($is_tag_exists){
						echo "<script>alert('标签已存在！');window.history.go('-1')</script>";
						exit();
					}
				}

				// 只有当确实上传了文件，才去处理图片
				if($_FILES['icon']['name']){
					$upload_path = _gc('uploads_path'). 'bbs_icons/';
					if(!file_exists($upload_path)){
						if(!mkdir($upload_path, 0777, TRUE)){
							echo '创建上传目录失败!';
							exit;
						}
					}
					$config = array(
									'upload_path' => $upload_path,
									'allowed_types' => 'gif|jpg|png',
									'encrypt_name' => TRUE,
									'max_size' => '2000',
									'max_width' => '1024',
									'max_height' => '768'
								);
					$this->load->library('upload', $config);
					if(!$this->upload->do_upload($input_file_name)){
						$error = $this->upload->display_errors('<p>', '</p>');
						echo "<script>alert('{$error}');window.history.go('-1')</script>";
						exit();
					}
					$data = $this->upload->data();
					$icon_system_path = $data['full_path'];

					// 数据库存储tag icon的路径
					$icon_url = 'uploads/bbs_icons/' . $data['file_name'];
					$data = array(
								'tag_name' => $tag_name,
								'description' => $description,
								'icon_url' => $icon_url,
								'ctime' => time(),
								'isshow' => 1
							);
				}else{
					$data = array(
								'tag_name' => $tag_name,
								'description' => $description,
								'ctime' => time(),
								'isshow' => 1
							);
				}
				$where = array(
							'tag_id'=> $tag_id
						);

				// 得到新增的tag_id
				$bool = $this->bbs_tag_model->update_tag($data, $where);
				if($bool && $icon_url){

					// 删除之前的图片
					@unlink(ROOTPATH . $prev_icon_url);
					echo "<script>alert('修改成功');location='{$this->site_url}bbs_tag/edit_tag/{$tag_id}'</script>";
					exit;
				}elseif($bool){
					echo "<script>alert('修改成功');location='{$this->site_url}bbs_tag/edit_tag/{$tag_id}'</script>";
					exit;
				}else{
					echo "<script>alert('修改失败');location='{$this->site_url}bbs_tag/edit_tag/{$tag_id}'</script>";
					exit;
				}
			}
		}
		
		/**
		 *
		 * 	新增标签
		 *
		 */
		public function add_tag()
		{
			$tag_name = trim($this->input->post('tag_name'));
			$description = trim($this->input->post('description'));
			$is_top = $this->input->post('is_top');
			$input_file_name = 'icon';
			if(empty($tag_name)){
				echo "<script>alert('标签不能为空！');window.history.go('-1')</script>";
				exit();
			}

			// 这里先使用bbs_strlen()，中文字和英文字都当成一个字符来处理
			if(bbs_strlen($tag_name) > 16){
				echo "<script>alert('简介不能超过16字！');window.history.go('-1')</script>";
				exit();
			}

			// 增加一条，检验机制，验证 tag_name 是否已经存在
			$is_tag_exists = $this->bbs_tag_model->is_tag_exists($tag_name);
			if($is_tag_exists){
				echo "<script>alert('标签已存在！');window.history.go('-1')</script>";
				exit();
			}

			// 允许用户不上传图片，只有当上传的时候再进行图片上传处理
			if($_FILES[$input_file_name]['name']){
				// 图片上传，暂时使用CI的
				$upload_path = _gc('uploads_path'). 'bbs_icons/';
				if(!file_exists($upload_path)){
					if(!mkdir($upload_path, 0777, TRUE)){
						echo '创建上传目录失败!';
						exit;
					}
				}
				$config = array(
								'upload_path' => $upload_path,
								'allowed_types' => 'gif|jpg|png',
								'encrypt_name' => TRUE,
								'max_size' => '2000',
								'max_width' => '1024',
								'max_height' => '768'
							);
				$this->load->library('upload', $config);
				if(!$this->upload->do_upload($input_file_name)){
					$error = $this->upload->display_errors('<p>', '</p>');
					echo "<script>alert('{$error}');window.history.go('-1')</script>";
					exit();
				}
				$data = $this->upload->data();
				$icon_system_path = $data['full_path'];

				// 数据库存储tag icon的路径
				$icon_url = 'uploads/bbs_icons/' . $data['file_name'];
			}else{
				$icon_url = '';
			}
			$data = array(
						'tag_name' => $tag_name,
						'description' => $description,
						'icon_url' => $icon_url,
						'ctime' => time(),
						'isshow' => 1
					);


			// 得到新增的tag_id
			$tag_id = $this->bbs_tag_model->add_tag($data);
			if(!$tag_id && $_FILES[$input_file_name]['name']){

				// 添加失败，删除上传的图标
				@unlink($icon_system_path);
				echo "<script>alert('添加失败！');window.history.go('-1')</script>";
				exit();
			}

			// 如果点击的是 '添加顶级tag'，直接建立顶级tag关系
			// is_top = 0 | 1
			if($is_top){
				$this->bbs_tag_model->add_top_map($tag_id);	
			}

			// 此时，并没有任何的父子关系
			$vars = array('cur_tag' => array(
										'tag_id' => $tag_id,
										'tag_name' => $tag_name
									),
						'is_top' => $is_top
					);
			$this->load->view('bbs_tag/add_success', $vars);
		}
		
		/**
		 *
		 * 	新增子关系
		 * 	
		 * 	0 	- 	tag_name不存在
		 * 	N	- 	添加成功(返回的是新标签的ID，用于追加元素)
		 * 	-1 	- 	对应关系已存在
		 * 	-2 	- 	添加失败
		 */
		public function add_child()
		{
			$child_name = trim($this->input->post('child_name'));
			if(empty($child_name)){
				$return_data = json_encode(array(
								'status' => -1,
								'content' => '子标签不能为空!'
							));
				echo $return_data;
				exit;
			}
			$cur_tag_id = (int) $this->input->post('cur_tag_id');
			$child_tag_id = (int) $this->bbs_tag_model->get_tag_id_by_tag_name($child_name);
			if(!$child_tag_id){
				$return_data = json_encode(array(
									'status' => -2,
									'content' => '要添加的子标签不存在，请先建立'
								));
				echo $return_data;
				exit;
			}

			// 不可以添加顶级标签
			$istop = $this->bbs_tag_model->is_toptag_by_tag_id($child_tag_id);
			if($istop){
				$return_data = json_encode(array(
									'status' => -3,
									'content' => '不能添加顶级标签为子标签'
								));
				echo $return_data;
				exit;
			}
			$type = 'child';
			$status = $this->bbs_tag_model->add_map($child_tag_id, $cur_tag_id, $type);
			switch($status){
				case 0:
					$return_data = json_encode(array(
									'status' => 0,
									'content' => '添加失败!'
								));
					break;
				case -4:
					$return_data = json_encode(array(
									'status' => -4,
									'content' => '对应关系已存在!'
								));
					break;
				case -5:
					$return_data = json_encode(array(
									'status' => -5,
									'content' => '不能添加当前标签的父级标签和本身为子标签!'
								));
					break;
				case -6:
					$return_data = json_encode(array(
									'status' => -6,
									'content' => '不能添加当前标签的子级标签和本身为父标签!'
								));
					break;
				default :
					$return_data = json_encode(array(
									'status' => $status,
									'content' => '添加成功!'
								));
					break;

			}
			echo $return_data;
			exit;
		}

		/**
		 *
		 * 	新增父关系
		 * 	
		 * 	0 	- 	tag_name不存在
		 * 	N	- 	添加成功(返回的是新标签的ID，用于追加元素)
		 * 	-1 	- 	对应关系已存在
		 * 	-2 	- 	添加失败
		 */
		public function add_parent()
		{
			$parent_name = trim($this->input->post('parent_name'));
			if(empty($parent_name)){
				$return_data = json_encode(array(
								'status' => -1,
								'content' => '父标签不能为空!'
							));
				echo $return_data;
				exit;
			}
			$cur_tag_id = (int) $this->input->post('cur_tag_id');
			$parent_tag_id = (int) $this->bbs_tag_model->get_tag_id_by_tag_name($parent_name);
			if(!$parent_tag_id){
				$return_data = json_encode(array(
									'status' => -2,
									'content' => '要添加的父标签不存在，请先建立'
								));
				echo $return_data;
				exit;
			}

			// 不可以添加顶级标签
			// 这里进行修改，添加父级标签的时候，是可以指定为顶级标签的，先放开
			// $istop = $this->bbs_tag_model->is_toptag_by_tag_id($parent_tag_id);
			// if($istop){
			// 	$return_data = json_encode(array(
			// 						'status' => -3,
			// 						'content' => '不能添加顶级标签为父标签'
			// 					));
			// 	echo $return_data;
			// 	exit;
			// }
			$type = 'parent';
			$status = $this->bbs_tag_model->add_map($cur_tag_id, $parent_tag_id, $type);
			switch($status){
				case 0:
					$return_data = json_encode(array(
									'status' => 0,
									'content' => '添加失败!'
								));
					break;
				case -4:
					$return_data = json_encode(array(
									'status' => -4,
									'content' => '对应关系已存在!'
								));
					break;
				case -5:
					$return_data = json_encode(array(
									'status' => -5,
									'content' => '不能添加当前标签的父级标签和本身为子标签!'
								));
					break;
				case -6:
					$return_data = json_encode(array(
									'status' => -6,
									'content' => '不能添加当前标签的子级标签和本身为父标签!'
								));
					break;
				default :
					$return_data = json_encode(array(
									'status' => $status,
									'content' => '添加成功!'
								));
					break;

			}
			echo $return_data;
			exit;
		}

		/**
		 *
		 *  删除child和parent关系
		 *
		 */
		public function del_map()
		{
			$tag_id = (int) $this->input->post('tag_id');
			$parent_id = (int) $this->input->post('parent_id');
			$return = $this->bbs_tag_model->del_map($tag_id, $parent_id);
			if($return){
				$return_data = array(
									'status' => 1,
									'content' => '删除关联关系成功'
								);
			}else{
				$return_data = array(
									'status' => 0,
									'content' => '删除关联关系失败'
								);
			}
			echo json_encode($return_data);
			exit;
		}

		/**
		 *
		 * 	查询 tag_id 是否有多个父分支 
		 *
		 */
		// public function tag_parent_num()
		// {
		// 	$tag_id = (int) $this->input->post('tag_id');
		// 	$parent_num = $this->bbs_tag_model->get_tag_parent_num($tag_id);
		// 	return $parent_num;
		// }

		/**
		 *
		 *  推荐标签
		 *
		 */
		public function recommend()
		{
			$top_tag_list = $this->bbs_tag_model->get_recommend_list();
			$vars = array(
						'top_tag_list' => $top_tag_list
					);
			$this->load->view('bbs_tag/recommend', $vars);	
		}

		/**
		 *
		 * 	修改顶级tag标签顺序
		 *
		 */
		public function edit_top_sortid()
		{
			$tag_id = (int) $this->input->post('tag_id');
			$sortid = (int) $this->input->post('sortid');
			$return = $this->bbs_tag_model->edit_top_sortid($tag_id, $sortid);
			echo ($return ? 1 : 0);
		}

		/**
		 *
		 * 	标签推荐
		 *
		 */
		public function edit_recommend_sortid()
		{
			$tag_id = (int) $this->input->post('tag_id');
			$recommend_id = (int) $this->input->post('recommend_id');
			$sortid = (int) $this->input->post('sortid');
			if($sortid){

				// 查看有无该推荐记录
				$is_recommend = $this->bbs_tag_model->is_recommend($tag_id, $recommend_id);
				if(!$is_recommend){
					$return = $this->bbs_tag_model->add_recommend($tag_id, $recommend_id, $sortid);
					echo ($return ? 1 : 0);
					exit;
				}else{
					$return = $this->bbs_tag_model->edit_recommend($tag_id, $recommend_id, $sortid);
					echo ($return ? 2 : 0);
					exit;
				}
			}else{
				$return = $this->bbs_tag_model->del_recommend($tag_id, $recommend_id);
				echo ($return ? 3 : 0);
				exit;
			}
		}
	}
