<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

/**
 * 此处专门处理财务需求
 */
class Wds_reconcil extends Acp_Controller {

    private $_alipay_config = array();
    private $status_debt = array(0 => '未赊账', '1' => '赊账中');
    private $_title = array(
        'back_id' => '摩点单号',
        'order_no' => '外部单号',
        'ali_trade_no' => '支付宝业务流水号',
        'pro_id' => '项目ID',
        'pro_name' => '项目名称',
        'pro_status' => '项目状态',
        'money' => '支持金额',
        'bak_user_id' => '支持者ID',
        'user_name' => '支持者名称',
        'address_mobile' => '手机',
        'address_email' => '邮件',
        'if_pay' => '交易状态',
        'bank_type' => '交易渠道',
        'trans_date' => '交易时间',
        'operation' => '操作',
    );

    public function __construct() {
        parent::__construct();

        $this->load->helper('url');
        $this->load->model('Wds_acp_m');
        $this->load->model('Common');
        $this->load->model('User_m');
        $this->load->model('Product_m');
        $this->load->model('Admin_m');
        $this->load->model('Order_biz');
        $this->load->model('Account_m');
        $this->load->library('md_refund');
        $this->load->library('md_payment_weixin');
        require_once(LIB_PATH . "/payment/alipay_erp/lib/alipay_submit.class.php");
    }

    public function index($type = 'normal', $page = 1) {

        $data['type'] = $type;
        $data['pro_id'] = $this->input->get_post('pro_id');
        $data['pro_name'] = $this->input->post('pro_name');
        $data['user_mobile'] = $this->input->post('user_mobile');
        $data['pay_time_start'] = $this->input->post('pay_time_start');
        $data['pay_time_end'] = $this->input->post('pay_time_end');
        $data['pro_status'] = $this->input->post('pro_status');
        $data['except_reason'] = $this->input->post('except_reason');

        $data['per_page'] = 8;
        $data['offset'] = ($page - 1) * $data['per_page'];

        //是否是全部订单页
        if (!empty($data['pro_id']) && $type == 'normal') {
            $res = $this->_get_normal_pay($data);//获取全部订单
            $data['res'] = $res['list'];
            $data['total_rows'] = $res['total'];
            unset($res);
        } elseif (!empty($data['pro_id']) && $type == 'abnormal') {
            //修复异常订单
            if ($this->input->get('repair') == 'all') {
                //修复支付时间
                $sql = "update md_pay pay,md_product_back bak,md_pay_record_alipay ali SET pay.ctime=ali.trans_date,bak.ctime=ali.trans_date
WHERE ali.merchant_out_order_no=pay.out_trade_no AND bak.id=pay.back_id AND bak.ctime LIKE '2014-07-01 19:%' AND ali.income>0";
                $this->db->query($sql);
                //修复已支付但我方状态为未支付的订单
                $sql = "UPDATE md_pay pay,md_product_back bak,md_pay_record_alipay ali SET pay.`status`=1,bak.if_pay=1,pay.return_str=CONCAT('参照:',ali.trade_no),bak.ctime=ali.trans_date 
WHERE pay.back_id=bak.id 
AND pay.out_trade_no=ali.merchant_out_order_no 
AND ali.income>0 
AND pay.`status`=0 AND bak.if_pay=0";
                $this->db->query($sql);
                //修复back与支付表状态不符
                $sql = "UPDATE md_pay pay,md_product_back bak,md_pay_record_alipay ali SET pay.`status`=1,bak.if_pay=1,pay.return_str=CONCAT('参照:',ali.trade_no),bak.ctime=ali.trans_date 
WHERE pay.back_id=bak.id 
AND pay.out_trade_no=ali.merchant_out_order_no 
AND ali.income>0 
AND pay.`status`=0 AND bak.if_pay=1";
                $this->db->query($sql);
                //修复back与支付表状态不符
                $sql = "UPDATE md_pay pay,md_product_back bak,md_pay_record_alipay ali SET pay.`status`=1,bak.if_pay=1,pay.return_str=CONCAT('参照:',ali.trade_no),bak.ctime=ali.trans_date 
WHERE pay.back_id=bak.id 
AND pay.out_trade_no=ali.merchant_out_order_no 
AND ali.income>0 
AND pay.`status`=1 AND bak.if_pay=0";
                $this->db->query($sql);
                redirect('wds_reconcil/index/' . $type);
            }

            $res = $this->_get_abnormal_pay($data);
            $data['res'] = $res['list'];
            $data['total_rows'] = $res['total'];
            unset($res);
            $this->_title = array_merge(array('warning' => '异常类型'), $this->_title);
        } else {
            $data['res'] = array();
            $data['total_rows'] = 0;
        }


        $config = array(
            'uri_segment' => 4,
            'base_url' => site_url("wds_reconcil/index/{$type}"),
            'use_page_numbers' => true,
            'num_links' => 2,
            'total_rows' => $data['total_rows'],
            'per_page' => $data['per_page'],
            'full_tag_open' => '<ul id="page-nav" class="pager">',
            'full_tag_close' => '</ul>',
            'first_link' => '首页',
            'first_tag_open' => '<li style="display:none;">',
            'first_tag_close' => '</li>',
            'last_link' => '尾页',
            'last_tag_open' => '<li style="display:none;">',
            'last_tag_close' => '</li>',
            'next_link' => '下一页',
            'next_tag_open' => '<li>',
            'next_tag_close' => '</li>',
            'prev_link' => '前一页',
            'prev_tag_open' => '<li>',
            'prev_tag_close' => '</li>',
            'cur_tag_open' => '<li class="disabled"><a href="javascript:void(0)">',
            'cur_tag_close' => '</a></li>',
            'num_tag_open' => '<li>',
            'num_tag_close' => '</li>',
        );
        $this->pagination->initialize($config);
        $pagination = $this->pagination->create_links();
        $data['pagination'] = $pagination;

        $data['title'] = $this->_title;
        $this->load->view('weidashang/reconciliations', $data);
    }
    //导出excel
    public function export($type = 'normal', $pro_id = null) {
        $data['type'] = $type;
        $data['pro_id'] = $pro_id;
        $data['pro_name'] = $this->input->post('pro_name');
        $data['user_mobile'] = $this->input->post('user_mobile');
        $data['pay_time_start'] = $this->input->post('pay_time_start');
        $data['pay_time_end'] = $this->input->post('pay_time_end');
        $data['pro_status'] = $this->input->post('pro_status');
        $data['except_reason'] = $this->input->post('except_reason');
        $data['per_page'] = null;
        $data['offset'] = null;

        if ($pro_id !== null && $type == 'normal') {
            $res = $this->_get_normal_pay($data);
            $data['res'] = $res['list'];
            $data['total_rows'] = $res['total'];
            unset($res);
        } elseif ($pro_id !== null) {
            $res = $this->_get_abnormal_pay($data);
            $data['res'] = $res['list'];
            $data['total_rows'] = $res['total'];
            unset($res);
            $this->_title = array_merge(array('warning' => '异常类型'), $this->_title);
        } else {
            $data['res'] = array();
        }

        $filename = time() . '.xls';
        $this->load->helper('excel');
        export_to_excel($this->_title, $data['res'], $filename);

    }
    
    /**
     * 生成where
     * @param type $parms
     * @return type
     */
    public function _filterParamToWhere($parms) {
        $where = "";
        if ($parms['pro_id']) {
            $where .= " AND bak.wds_id='{$parms['pro_id']}' ";
        }
        if ($parms['user_mobile']) {
            $where .= " AND usr.mobile='{$parms['user_mobile']}' ";
        }
        if ($parms['pay_time_start']) {
            $where .= " AND pay.return_time>='{$parms['pay_time_start']}' ";
        }
        if ($parms['pay_time_end']) {
            $where .= " AND pay.return_time<='{$parms['pay_time_end']}' ";
        }

        if ($parms['pro_name']) {
            $where .= " AND pro.name LIKE '%{$parms['pro_name']}%' ";
        }
        return $where;
    }    
    /**
     * 获取全部nomal订单
     * @param type $parms
     * @return string
     */
    public function _get_normal_pay($parms) {
        $where = $this->_filterParamToWhere($parms);
        $sql = "SELECT bak.id AS back_id,
                        pay.out_trade_no AS order_no,
                        ali.trade_no AS ali_trade_no,
                        pro.id AS pro_id,
                        pro.name AS pro_name,
                        '无' AS pro_status,
                        bak.amount AS money,
                        bak.user_id AS bak_user_id,
                        usr.username AS user_name,
                        usr.mobile,
                        usr.email,
                        pay.status AS if_pay,
                        pay.bank_type,
                        ali.trans_date as trans_date,
                        '操作' AS operation
                    FROM md_product_back bak
                        INNER JOIN md_weidashang_product pro ON pro.id = bak.wds_id
                        INNER JOIN md_pay pay ON bak.id = pay.back_id
                        INNER JOIN md_users usr ON bak.user_id = usr.id
                        INNER JOIN md_pay_record_alipay ali ON ali.merchant_out_order_no = pay.out_trade_no AND ali.income > 0
                    WHERE bak.if_pay=1 AND pay.status=1 {$where}";
        $res['total'] = $this->db->query($sql)->num_rows();

        if ($parms['offset'] !== null && $parms['per_page'] !== null)
            $sql .= "LIMIT {$parms['offset']}, {$parms['per_page']}";
        $res['list'] = $this->db->query($sql)->result_array();
        foreach ($res['list'] as $k => $item) {
            $tmp = $this->Wds_acp_m->get_product_status($item['pro_id'], 1);
            switch ($tmp) {
                case PRODUCT_STATUS_FINANCING_SUCCESS:
                    $res['list'][$k]['pro_status'] = "众筹成功";
                    break;
                case PRODUCT_STATUS_FINANCING_FAILURE:
                    $res['list'][$k]['pro_status'] = "众筹失败";
                    break;
                case PRODUCT_STATUS_FINANCING_FULL:
                case PRODUCT_STATUS_FINANCING_HUNGRY:
                    $res['list'][$k]['pro_status'] = "众筹中";
                    break;
                default:
                    $res['list'][$k]['pro_status'] = "不知道";
                    break;
            }
        }
        return $res;
    }
    /**
     * 获取abnormal的订单
     * @param type $parms
     * @return type
     */
    public function _get_abnormal_pay($parms) {
        $repeat_paid_order = array();
        if (empty($parms['except_reason']) || intval($parms['except_reason']) == 1)
            $repeat_paid_order = $this->Wds_acp_m->get_repeat_paid_order_ids($parms['pro_id']);
        $exceed_time_order = array();
        if (empty($parms['except_reason']) || intval($parms['except_reason']) == 2)
            $exceed_time_order = $this->Wds_acp_m->get_exceed_time_paid_order_ids($parms['pro_id'],$parms['pay_time_end']);
        $md_unsucc_order = array();
        if (empty($parms['except_reason']) || intval($parms['except_reason']) == 3)
            $md_unsucc_order = $this->Wds_acp_m->get_md_unsucc_order_ids($parms['pro_id']);
        $md_repaired_order = array();
        if (empty($parms['except_reason']) || intval($parms['except_reason']) == 4)
            $md_repaired_order = $this->Wds_acp_m->get_md_repaired_order_ids($parms['pro_id']);
        $md_unrefund_order = array();
        if (empty($parms['except_reason']) || intval($parms['except_reason']) == 5)
            $md_unrefund_order = $this->Wds_acp_m->get_md_unrefund_order_ids($parms['pro_id']);
        $id_arr = array_merge(array(0), $repeat_paid_order, $exceed_time_order, $md_unsucc_order, $md_repaired_order, $md_unrefund_order);
        $id_arr = '(' . implode(',', $id_arr) . ')';

        $where = $this->_filterParamToWhere($parms);
        $sql = "SELECT bak.id AS back_id,
                        pay.out_trade_no AS order_no,
                        '暂无' AS ali_trade_no,
                        pro.id AS pro_id,
                        pro.name AS pro_name,
                        '暂无' AS pro_status,
                        bak.status AS back_status,
                        bak.amount AS money,
                        bak.user_id AS bak_user_id,
                        usr.username AS user_name,
                        usr.mobile,
                        usr.email,
                        pay.status AS if_pay,
                        pay.bank_type,
                        '暂无' AS trans_date,
                        '操作' AS operation,
                        pay.pay_platform
                    FROM md_product_back bak
                        INNER JOIN md_weidashang_product pro ON pro.id = bak.wds_id
                        INNER JOIN md_users usr ON bak.user_id = usr.id
                        INNER JOIN md_pay pay ON bak.id = pay.back_id
                    WHERE bak.id IN {$id_arr} {$where}
                    ORDER BY bak.id ";
        $res['total'] = $this->db->query($sql)->num_rows();
        $res['list'] = $this->db->query($sql)->result_array();
        foreach ($res['list'] as &$item) {
            if (intval($item['if_pay']) === 0 && !in_array($item['back_id'], $md_unsucc_order)) {
                unset($item);
                continue;
            }

            switch (intval($item['if_pay'])) {
            case 0:
                $item['if_pay'] = "未支付";
                break;
            case 1:
                $item['if_pay'] = "已支付";
                if (in_array($item['back_status'], array(402,302,204)))
                    $item['if_pay'] = "退款中";
                elseif (in_array($item['back_status'], array(400,300,205)))
                    $item['if_pay'] = "已退款";
                else
                    ;
                break;
            case 35:
            case 36:
                $item['if_pay'] = "退款中";
                break;
            case 31:
            case 39:
                $item['if_pay'] = "已退款";
                break;
            default:
                # code...
                break;
            }

            $tmp = $this->Wds_acp_m->get_paid_order_third_party_info($item['order_no'], $item['pay_platform']);
            $item['ali_trade_no'] = $tmp['trade_no'];
            $item['trans_date'] = $tmp['trans_date'];

            $tmp = $this->Wds_acp_m->get_product_status($item['pro_id'], 1);
            switch ($tmp) {
            case PRODUCT_STATUS_FINANCING_SUCCESS:
                $item['pro_status'] = "众筹成功";
                break;
            case PRODUCT_STATUS_FINANCING_FAILURE:
                $item['pro_status'] = "众筹失败";
                break;
            case PRODUCT_STATUS_FINANCING_FULL:
            case PRODUCT_STATUS_FINANCING_HUNGRY:
                $item['pro_status'] = "众筹中";
                break;
            default:
                $item['pro_status'] = "不知道";
            }

            $tt1 = $this->Wds_acp_m->get_repaired_repeat_paid_out_trade_no($item['pro_id']);
            $tt2 = $this->Wds_acp_m->get_repaired_exceed_time_out_trade_no($item['pro_id']);
            $tt3 = $this->Wds_acp_m->get_repaired_unsucc_out_trade_no($item['pro_id']);
            $tt4 = $this->Wds_acp_m->get_repaired_unrefundsucc_info('out_trade_no', $item['pro_id']);

            if (in_array($item['back_id'], $md_unrefund_order)) {
                $item['warning'] = '未收到退款成功信息';
                if (in_array($item['order_no'], $tt4)) {
                    $item['operation'] = '已修复';
                } elseif ($item['if_pay'] == '退款中') {
                    if (empty($item['ali_trade_no']) || ($parms['offset'] == null && $parms['per_page'] == null)) {
                        $item['operation'] = '修复';
                    } else {
                        $item['operation'] = '<a class="repair" href="#" data-repair=\'' .
                                json_encode(
                                        array(
                                            'repair_type'  => 4,
                                            'back_id'      => $item['back_id'],
                                            'pay_platform' => $item['pay_platform'],
                                            'order_no'     => $item['order_no'],
                                            'trade_no'     => $item['ali_trade_no'],
                                            'pay_money'    => $item['money'],
                                            'pro_id'       => $item['pro_id'],
                                            'pro_status'   => $item['pro_status']
                                )) . '\'>修复</a>';
                    }
                } else {
                    $item['operation'] = '无需修复';
                }
            } elseif (in_array($item['back_id'], $md_unsucc_order)) {
                $item['warning'] = '未收到支付成功信息';
                if (in_array($item['order_no'], $tt3)) {
                    $item['operation'] = '已修复';
                } else {
                    if (empty($item['ali_trade_no']) || ($parms['offset'] == null && $parms['per_page'] == null)) {
                        $item['operation'] = '修复';
                    } else {
                        $item['operation'] = '<a class="repair" href="#" data-repair=\'' .
                                json_encode(
                                        array(
                                            'repair_type'  => 3,
                                            'back_id'      => $item['back_id'],
                                            'pay_platform' => $item['pay_platform'],
                                            'order_no'     => $item['order_no'],
                                            'trade_no'     => $item['ali_trade_no'],
                                            'pay_money'    => $item['money'],
                                            'pro_id'       => $item['pro_id'],
                                            'pro_status'   => $item['pro_status']
                                )) . '\'>修复</a>';
                    }
                }
            } elseif (in_array($item['back_id'], $exceed_time_order)) {
                $item['warning'] = '过期支付';
                if (in_array($item['order_no'], $tt2) || in_array($item['order_no'], $tt1)) {
                    $item['operation'] = '已修复';
                } else {
                    if (empty($item['ali_trade_no']) || ($parms['offset'] == null && $parms['per_page'] == null)) {
                        $item['operation'] = '修复';
                    } else {
                        $item['operation'] = '<a class="repair" href="#" data-repair=\'' .
                                json_encode(
                                        array(
                                            'repair_type'  => 2,
                                            'back_id'      => $item['back_id'],
                                            'pay_platform' => $item['pay_platform'],
                                            'order_no'     => $item['order_no'],
                                            'trade_no'     => $item['ali_trade_no'],
                                            'pay_money'    => $item['money'],
                                            'pro_id'       => $item['pro_id'],
                                            'pro_status'   => $item['pro_status']
                                )) . '\'>修复</a>';
                    }
                }
            } elseif (in_array($item['back_id'], $repeat_paid_order)) {
                $item['warning'] = '重复支付';
                if (in_array($item['order_no'], $tt2) || in_array($item['order_no'], $tt1)) {
                    $item['operation'] = '已修复';
                } else {
                    if (empty($item['ali_trade_no']) || ($parms['offset'] == null && $parms['per_page'] == null)) {
                        $item['operation'] = '修复';
                    } else {
                        $item['operation'] = '<a class="repair" href="#" data-repair=\'' .
                                json_encode(
                                        array(
                                            'repair_type'  => 1,
                                            'back_id'      => $item['back_id'],
                                            'pay_platform' => $item['pay_platform'],
                                            'order_no'     => $item['order_no'],
                                            'trade_no'     => $item['ali_trade_no'],
                                            'pay_money'    => $item['money'],
                                            'pro_id'       => $item['pro_id'],
                                            'pro_status'   => $item['pro_status']
                                )) . '\'>修复</a>';
                    }
                }
            } else {

                $tt1 = $this->Wds_acp_m->get_repaired_repeat_paid_ids($item['pro_id']);
                $tt2 = $this->Wds_acp_m->get_repaired_exceed_time_ids($item['pro_id']);
                $tt3 = $this->Wds_acp_m->get_repaired_unsucc_ids($item['pro_id']);
                $tt4 = $this->Wds_acp_m->get_repaired_unrefundsucc_info('back_id', $item['pro_id']);

                if (in_array($item['back_id'], $tt1)) {
                    $item['warning'] = '重复支付';
                    $item['operation'] = '已修复';
                } elseif (in_array($item['back_id'], $tt2)) {
                    $item['warning'] = '过期支付';
                    $item['operation'] = '已修复';
                } elseif (in_array($item['back_id'], $tt3)) {
                    $item['warning'] = '未收到支付成功信息';
                    $item['operation'] = '已修复';
                } elseif (in_array($item['back_id'], $tt4)) {
                    $item['warning'] = '未收到退款成功信息';
                    $item['operation'] = '已修复';
                } else {
                    $item['warning'] = '不知道';
                }
            }
        }

        if ($parms['offset'] !== null && $parms['per_page'] !== null)
            $res['list'] = array_slice($res['list'], $parms['offset'], $parms['per_page']);

        return $res;
    }
    /**
     * 
     * @param type $page
     */
    public function check_account($page = 1) {
        $data['type'] = 'check_account';

        $pro_id = $this->input->post('pro_id');
        if (!$pro_id) $pro_id = null;

        $per_page = 11;
        $offset = (intval($page) - 1) * $per_page;
        $res = $this->Wds_acp_m->get_product_list_info($pro_id, $per_page, $offset);

        $data['product_list'] = array();
        $this->_set_pro_account_page_data($data['product_list'], $res['list']);
        unset($res['list']);

        $config = array(
            'uri_segment' => 3,
            'base_url' => site_url("wds_reconcil/check_account"),
            'use_page_numbers' => true,
            'num_links' => 2,
            'total_rows' => $res['total'],
            'per_page' => $per_page,
            'full_tag_open' => '<ul id="page-nav" class="pager">',
            'full_tag_close' => '</ul>',
            'first_link' => '首页',
            'first_tag_open' => '<li style="display:none;">',
            'first_tag_close' => '</li>',
            'last_link' => '尾页',
            'last_tag_open' => '<li style="display:none;">',
            'last_tag_close' => '</li>',
            'next_link' => '下一页',
            'next_tag_open' => '<li>',
            'next_tag_close' => '</li>',
            'prev_link' => '前一页',
            'prev_tag_open' => '<li>',
            'prev_tag_close' => '</li>',
            'cur_tag_open' => '<li class="disabled"><a href="javascript:void(0)">',
            'cur_tag_close' => '</a></li>',
            'num_tag_open' => '<li>',
            'num_tag_close' => '</li>',
        );
        $this->pagination->initialize($config);
        $pagination = $this->pagination->create_links();
        $data['pagination'] = $pagination;

        $this->load->view('weidashang/pro_account_list', $data);
    }  
    // $page_type: 0 for page render; 1 for export render.
    private function _set_pro_account_page_data(&$result, $base, $page_type=0)
    {
        foreach ($base as $ii => $row) {
            $result[$ii]['pro_id'] = $row['id'];
            $result[$ii]['pro_name'] = $row['name'];
            $result[$ii]['user_id'] = $row['user_id'];
            $result[$ii]['goal'] = $row['goal'];
            $result[$ii]['has_back'] = $row['all_amount'];

            if (intval($result[$ii]['goal']) == 0)
                $result[$ii]['progress'] = "目标金额为0";
            else
                $result[$ii]['progress'] = sprintf("%.2f%%", ($result[$ii]['has_back'] / $result[$ii]['goal']) * 100);

            $tmp = $this->Wds_acp_m->get_product_status($row['id'], 1);
            switch ($tmp) {
                case PRODUCT_STATUS_FINANCING_SUCCESS:
                    $result[$ii]['pro_status'] = "众筹成功";
                    break;
                case PRODUCT_STATUS_FINANCING_FAILURE:
                    $result[$ii]['pro_status'] = "众筹失败";
                    break;
                case PRODUCT_STATUS_FINANCING_FULL:
                case PRODUCT_STATUS_FINANCING_HUNGRY:
                    $result[$ii]['pro_status'] = "众筹中";
                    break;
                default:
                    $result[$ii]['pro_status'] = "不知道";
                    break;
            }

            $result[$ii]['start_time'] = $row['start_time'];
            $result[$ii]['end_time'] = $row['end_time'];
            $result[$ii]['paid_count'] = $this->Wds_acp_m->get_paid_order_count($row['id']);
            $result[$ii]['refund_req_count'] = $this->Wds_acp_m->get_refund_req_order_count($row['id']);
            $result[$ii]['refund_succ_count'] = $this->Wds_acp_m->get_refund_succ_order_count($row['id']);
            $result[$ii]['refund_ing_count'] = $this->Wds_acp_m->get_refund_ing_order_count($row['id']);
            $result[$ii]['except_order_count'] = $this->Wds_acp_m->get_exception_order_count($row['id']);
            $result[$ii]['operation'] = "查看订单";


            // 为页面提供链接
            if ($page_type != 1) {
                $result[$ii]['paid_count'] = "<a href='/wds_reconcil/orders?pro_id={$row['id']}&ordstat=1'>{$result[$ii]['paid_count']}</a>";
                $result[$ii]['refund_req_count'] = "<a href='/wds_reconcil/orders?pro_id={$row['id']}&ordstat=2'>{$result[$ii]['refund_req_count']}</a>";
                $result[$ii]['refund_succ_count'] = "<a href='/wds_reconcil/orders?pro_id={$row['id']}&ordstat=3'>{$result[$ii]['refund_succ_count']}</a>";
                $result[$ii]['refund_ing_count'] = "<a href='/wds_reconcil/orders?pro_id={$row['id']}&ordstat=4'>{$result[$ii]['refund_ing_count']}</a>";

                $result[$ii]['except_order_count'] = "<a href='/wds_reconcil/index/abnormal?pro_id={$row['id']}' style='color:red;'>{$result[$ii]['except_order_count']}</a>";

                $result[$ii]['operation'] = "<a href='/wds_reconcil/orders?pro_id={$row['id']}'>{$result[$ii]['operation']}</a>";
            }
        }
        unset($base);
    } 
    public function orders() {
        $data['pro_id'] = $this->input->get('pro_id');
        $data['postat'] = $this->input->get('postat');
        $data['ordstat'] = $this->input->get('ordstat');

        $data['order_status'] = $this->Order_biz->order_status;
        $data['order_status_group'] = $this->Order_biz->order_status_group;
        $this->load->view('weidashang/orders', $data);
    } 
    public function ajax_orders() {
        $rows = $_POST['rows'];
        $cur_page = $_POST['page'];
        $sort = $_POST['sort'];
        $order = $_POST['order'];
        $where = $this->_get_order_where($_POST);
        $count = count($this->_get_order_data($where, $order_by, '', true));
        $limit = " LIMIT " . ($cur_page - 1) * $rows . " ,{$rows}";
        $order_by = " ORDER BY {$sort} {$order}";
        $rows = $this->_get_order_data($where, $order_by, $limit);
        foreach ($rows as &$row) {
            $row['order_status'] = isset($this->Order_biz->order_status[$row['order_status']]) ? $this->Order_biz->order_status[$row['order_status']] : '';
            $row['bak_date'] = date("Y-m-d", strtotime($row['bak_date']));
            $row['bak_time'] = date("H:i:s", strtotime($row['bak_time']));


            if ($row['pay_date']) {
                if ($row['pay_date'] > '0000-00-00 00:00:00') {
                    $row['pay_date'] = date("Y-m-d", strtotime($row['pay_date']));
                    $row['pay_time'] = date("H:i:s", strtotime($row['pay_time']));
                } else {
                    $row['pay_date'] = $row['pay_time'] = '无';
                }
            }
            //$row['pro_end_date'] = date("Y-m-d H:i:s", strtotime($row['pro_start_date']) + $row['pro_end_date'] * 3600 * 24);
            $row['operation'] = '<a href="/wds_reconcil/order/' . $row['oid'] . '">订单详情</a>';
        }
        $result = array('total' => $count, 'rows' => $rows);
        echo json_encode($result);
    } 
    
    public function export_orders() {
        $arr_title = array(
            "oid" => "摩点订单号",
            "out_trade_no" => "第三方订单号",
            "md_plan" => "下单平台",
            "bak_date" => "下单时间",
            "bak_time" => "时间",
            "pro_name" => "项目名",
            "pro_id" => "项目ID",
            "pro_start_date" => "开始时间",
            "pro_end_date" => "结束时间",
            "is_return" => "要回报",
            'user_id' => '用户ID',
            "nickname" => "用户昵称",
            "reg_email" => "注册邮箱",
            "reg_mobile" => "注册手机",
            "amount" => "应支持金额 单价",
            "real_amount" => "实际应支持金额",
            "order_status" => "订单状态",
            "status_debt" => "赊账状态",
            "pay_date" => "支付日期",
            "pay_time" => "时间",
            "pay_plan" => "支付交易渠道",
            "pay_platform" => "支付通道",
            "rate" => "费率",
            "outcome" => "财务费用",
            "address_email" => "用户邮箱",
        );
        $where = $this->_get_order_where($_POST);
        $rows = $this->_get_order_data($where, $order_by, $limit);
        $this->load->library('PHPExcel');
        $objPHPExcel = new PHPExcel();
        $objPHPExcel->getProperties()->setTitle('export')->setDescription('none');
        $row_no = 1;
        $col = 0;
        $delim = ",";
        $newline = "\n";
        $enclosure = '"';
        $replace = array("\n");
        foreach ($arr_title as $title) {
            $title = str_replace($replace, '', $title);
            $title = iconv("UTF-8", "GB2312", $title);
            $out .= $enclosure . str_replace($enclosure, $enclosure . $enclosure, $title) . $enclosure . $delim;
        }
        $out .= $newline;
        $row_no++;
        foreach ($rows as $row) {
            $row['order_status'] = isset($this->Order_biz->order_status[$row['order_status']]) ? $this->Order_biz->order_status[$row['order_status']] : '';
            $row['bak_date'] = date("Y-m-d", strtotime($row['bak_date']));
            $row['bak_time'] = date("H:i:s", strtotime($row['bak_time']));
            $row['pay_date'] = $row['pay_date'] ? date("Y-m-d", strtotime($row['pay_date'])) : '';
            $row['pay_time'] = $row['pay_time'] ? date("H:i:s", strtotime($row['pay_time'])) : '';
            //$row['pro_end_date'] = date("Y-m-d H:i:s", strtotime($row['pro_start_date']) + $row['pro_end_date'] * 3600 * 24);
            $row['operation'] = '<a href="/pay_ad/order/' . $row['oid'] . '">订单详情</a>';
            $col = 0;
            foreach ($arr_title as $k => $title) {
                $value = $row[$k];
                $value = iconv("UTF-8", "GB2312", $value);
                $value = str_replace($replace, '', $value);
                $out .= $enclosure . str_replace($enclosure, $enclosure . $enclosure, $value) . $enclosure . $delim;
            }
            $out .= $newline;
        }

        ob_start();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="OrderList_' . date('dMy') . '.csv"');
        header('Cache-Control: max-age=0');

        echo $out;
        flush();
        ob_end_flush();
        unlink($finalFileName);
    }
    
    public function _get_order_where($arr_where) {
        $where = '';
        $pay_where = '';
        $order_st_where = '';
        if (isset($arr_where['pay_start_time']) && $arr_where['pay_start_time']) {
            $pay_where .= " AND return_time>='{$arr_where['pay_start_time']}'";
            $order_st_where .= " AND ctime>='{$arr_where['pay_start_time']}'";
        }
        if (isset($arr_where['pay_end_time']) && $arr_where['pay_end_time']) {
            $pay_where .= " AND return_time<='{$arr_where['pay_end_time']}'";
            $order_st_where .= " AND ctime<='{$arr_where['pay_end_time']}'";
        }
        if (isset($arr_where['trade_no']) && $arr_where['trade_no']) {
            $where .= " AND bak.trade_no='{$arr_where['trade_no']}'";
        }
        if (isset($arr_where['bak_start_time']) && $arr_where['bak_start_time']) {
            $where .= " AND bak.ctime>='{$arr_where['bak_start_time']}'";
        }
        if (isset($arr_where['bak_id']) && $arr_where['bak_id']) {
            $where .= " AND bak.id='{$arr_where['bak_id']}'";
        }
        if (isset($arr_where['bak_end_time']) && $arr_where['bak_end_time']) {
            $where .= " AND bak.ctime<='{$arr_where['bak_end_time']}'";
        }
        if (isset($arr_where['pro_name']) && $arr_where['pro_name']) {
            $where .= " AND pro.name LIKE '%{$arr_where['pro_name']}%'";
        }
        if (isset($arr_where['pro_id']) && $arr_where['pro_id']) {
            $where .= " AND bak.wds_id ='{$arr_where['pro_id']}'";
        }
        if (isset($arr_where['user_id']) && $arr_where['user_id']) {
            $where .= " AND bak.user_id ='{$arr_where['user_id']}'";
        }
        if (isset($arr_where['address_name']) && $arr_where['address_name']) {
            $where .= " AND usr.username ='{$arr_where['address_name']}'";
        }
        if (isset($arr_where['address_mobile']) && $arr_where['address_mobile']) {
            $where .= " AND usr.mobile ='{$arr_where['address_mobile']}'";
        }
        if (isset($arr_where['order_status']) && $arr_where['order_status']) {
            $where .= " AND bak.`status` ='{$arr_where['order_status']}'";
        }
        if (isset($arr_where['if_pay']) && $arr_where['if_pay'] != '') {
            $where .= " AND bak.`if_pay` ='{$arr_where['if_pay']}'";
        }
        if (isset($arr_where['reg_acc']) && $arr_where['reg_acc']) {
            switch ($arr_where['reg_acc']) {
                case 1:
                    $where .= " AND usr.email<>'' AND usr.platform=''";
                    break;
                case 2:
                    $where .= " AND usr.mobile<>'' AND usr.platform=''";
                    break;
                case 3:
                    $where .= " AND usr.platform='qq' ";
                    break;
                case 4:
                    $where .= " AND usr.platform='weibo' ";
                    break;
                case 5:
                    $where .= " AND usr.platform='renren' ";
                    break;
            }
        }
        if (isset($arr_where['pay_type']) && $arr_where['pay_type']) {
            switch ($arr_where['pay_type']) {
                case 1:
                    $pay_where .= " AND pay.pay_platform='alipay_wap' AND pay.status=1";
                    break;
                case 2:
                    $pay_where .= " AND pay.pay_platform='weixin_wap' AND pay.status=1";
                    break;
            }
        }
        if (isset($arr_where['md_plan']) && $arr_where['md_plan']) {
            $where .= " AND bak.`md_plan` ='{$arr_where['md_plan']}'";
        }
        if (isset($arr_where['out_trade_no']) && $arr_where['out_trade_no']) {
            $pay_where .= " AND pay.`out_trade_no` ='{$arr_where['out_trade_no']}'";
        }
        $back_ids = array();
        if ($pay_where) {
            $sql = "SELECT pay.back_id FROM md_pay pay
WHERE 1 $pay_where";
            $back_result = $this->db->query($sql)->result_array();
            $back_ids = array();
            foreach ($back_result as $item) {
                $back_ids[] = intval($item['back_id']);
            }
        }
        if ($order_st_where) {
            $sql = "SELECT back_id FROM md_order_status WHERE set_status='103' AND admin_id>0 $order_st_where";
            $back_result = $this->db->query($sql)->result_array();
            foreach ($back_result as $item) {
                $back_ids[] = intval($item['back_id']);
            }
        }
        if ($back_ids) {
            $where .= " AND bak.id IN (" . implode(',', $back_ids) . ") ";
        } else {
            if ($pay_where || $order_st_where) {
                $where .= " AND bak.id =-1 ";
            }
        }
        return $where;
    }  
    
public function _get_order_data($where = '', $order = 'ORDER BY oid', $limit = '', $is_count = false) {
        $sql = "SELECT 
	bak.id as oid,
	bak.md_plan as md_plan,
	bak.ctime as bak_date,
        bak.trade_no as trade_no,
	bak.ctime as bak_time,
	pro.`name` as pro_name,
	pro.id as pro_id,
	pro.start_time as pro_start_date,
	pro.end_time as pro_end_date,
	CASE WHEN bak.check_support='ON' THEN 'NO' ELSE 'YES' END as is_return,
	usr.nickname,
        usr.id as user_id,
        usr.email as reg_email,
        usr.mobile as reg_mobile,
	usr.nickname as create_user,
	usr.mobile as create_user_mobile,
        usr.email as address_email,
	bak.amount,
	'无' as bonus,
	bak.amount as real_amount,
        bak.`status` as order_status,
        bak.`status_debt`
FROM md_product_back bak
INNER JOIN md_weidashang_product pro ON bak.wds_id=pro.id 
INNER JOIN md_users usr ON bak.user_id=usr.id 
WHERE 1 $where
GROUP BY oid {$order} {$limit}";
        $query = $this->db->query($sql);
        $rows = $query->result_array();

        if (!$is_count) {
            $i = 0;
            $tmp_arr = array();
            foreach ($rows as $item) {

                $i++;
                $tmp_arr[] = $item['oid'];

                if ($i % 20 == 0 || $i >= count($rows) - 1) {
                    $sql = "SELECT pay.pay_platform,pay.bank_type as pay_plan,pay.out_trade_no,pay.return_time as pay_time,pay.return_time as pay_date,pay.back_id,merchant_out_order_no as pay_oid,outcome as outcome,rate as rate,ali.trans_code_msg FROM md_pay pay 
INNER JOIN md_pay_record_alipay ali ON pay.out_trade_no=ali.merchant_out_order_no AND pay.status=1
WHERE pay.back_id IN ('" . implode("','", $tmp_arr) . "')
UNION ALL
SELECT 
pay.pay_platform,
pay.bank_type as pay_plan,
pay.out_trade_no,
pay.return_time as pay_time,
pay.return_time as pay_date,
pay.back_id,
md_trade_no as pay_oid,
service_fee as outcome,
service_fee_ratio as rate,
'在线支付' as trans_code_msg 
FROM md_pay pay 
INNER JOIN md_pay_record_weixin wx ON pay.out_trade_no=wx.md_trade_no AND pay.status=1
WHERE pay.back_id IN ('" . implode("','", $tmp_arr) . "')
UNION ALL
SELECT 
pay.pay_platform,
pay.bank_type as pay_plan,
pay.out_trade_no,
pay.return_time as pay_time,
pay.return_time as pay_date,
pay.back_id,
out_trade_no as pay_oid,
'0' as outcome,
'暂无' as rate,
'在线支付' as trans_code_msg 
FROM md_pay pay 
WHERE pay.back_id IN ('" . implode("','", $tmp_arr) . "') AND pay.status=1
    ";

                    $query = $this->db->query($sql);
                    $alis = $query->result_array();
                    foreach ($alis as $ali) {
                        if ($ali['trans_code_msg'] == '收费') {
                            $rows['ali_data'][$ali['back_id']]['outcome'] = $ali['outcome'];
                            $rows['ali_data'][$ali['back_id']]['rate'] = $ali['rate'];
                        } else {
                            $rows['ali_data'][$ali['back_id']]['pay_oid'] = $ali['pay_oid'];
                            $rows['ali_data'][$ali['back_id']]['pay_platform'] = $ali['pay_platform'];
                            $rows['ali_data'][$ali['back_id']]['pay_date'] = $ali['pay_date'];
                            $rows['ali_data'][$ali['back_id']]['pay_time'] = $ali['pay_time'];
                            $rows['ali_data'][$ali['back_id']]['pay_plan'] = $ali['pay_plan'];
                            if (false === stripos($rows['ali_data'][$ali['back_id']]['out_trade_no'], $ali['out_trade_no'])) {
                                if ($rows['ali_data'][$ali['back_id']]['out_trade_no']) {
                                    $rows['ali_data'][$ali['back_id']]['out_trade_no'] .= " || " . $ali['out_trade_no'];
                                } else {
                                    $rows['ali_data'][$ali['back_id']]['out_trade_no'] = $ali['out_trade_no'];
                                }
                            }
                            if ($ali['outcome'] > 0) {
                                $rows['ali_data'][$ali['back_id']]['outcome'] = $ali['outcome'];
                                $rows['ali_data'][$ali['back_id']]['rate'] = $ali['rate'];
                            }
                        }
                    }
                    $tmp_arr = array();
                }
            }
            foreach ($rows as &$row) {
                $row['status_debt'] = $this->status_debt[$row['status_debt']];
                if (isset($rows['ali_data'][$row['oid']])) {
                    $row['pay_oid'] = $rows['ali_data'][$row['oid']]['pay_oid'];
                    $row['outcome'] = $rows['ali_data'][$row['oid']]['outcome'];
                    $row['rate'] = $rows['ali_data'][$row['oid']]['rate'];
                    $row['pay_date'] = $rows['ali_data'][$row['oid']]['pay_date'];
                    $row['pay_time'] = $rows['ali_data'][$row['oid']]['pay_time'];
                    $row['pay_plan'] = $rows['ali_data'][$row['oid']]['pay_plan'];
                    $row['out_trade_no'] = $rows['ali_data'][$row['oid']]['out_trade_no'];
                }
            }
            unset($rows['ali_data']);
            $rows = array_values($rows);
        }
        return $rows;
    } 
    
    public function order($oid) {
        $data['order_status'] = $this->Order_biz->order_status;
        $data['order_status_group'] = $this->Order_biz->order_status_group;

        if ($_POST && $_POST['order_status']) {
            $this->Common->update('md_product_back', array('id' => $oid), array('status_debt' => $_POST['status_debt']));
            $this->Order_biz->update_status($_POST['order_status'], $oid);
            redirect('/wds_reconcil/order/' . $oid);
        }
        $sql = "SELECT bak.*, usr.nickname,
        usr.email as reg_email,
        usr.mobile as reg_mobile,
	usr.nickname as create_user FROM md_product_back bak INNER JOIN md_users usr ON bak.user_id=usr.id WHERE bak.id='{$oid}'";
        $data['order_info'] = $this->db->query($sql)->row_array();
        $sql = "SELECT * FROM md_pay WHERE back_id='{$oid}'";
        $data['pay_list'] = $this->db->query($sql)->result_array();
        $sql = "SELECT pro.`name`,pro.des,pro.goal, pro.all_amount, usr.nickname,pro.user_id FROM md_weidashang_product pro
INNER JOIN md_users usr ON pro.user_id=usr.id
WHERE pro.id={$data['order_info']['wds_id']}";
        $data['pro_info'] = $this->db->query($sql)->row_array();

        $sql = "SELECT stat.*,ad_usr.`name` FROM md_order_status stat LEFT JOIN md_admin ad_usr ON stat.admin_id=ad_usr.id WHERE back_id='{$oid}' ORDER BY id";
        $order_status_log = $this->db->query($sql)->result_array();
        $order_log = array();
        $order_log[strtotime($data['order_info']['ctime'])] = '订单创建时间';
        foreach ($data['pay_list'] as $pay) {
            $order_log[strtotime($pay['ctime'])] = "创建".$pay['pay_platform']."订单 {$pay['out_trade_no']} ";
            if ($pay['return_time'] != '0000-00-00 00:00:00' && $pay['return_type'] != 0 && $pay['status']=='1') {
                $time = strtotime($pay['return_time']);
                if (isset($order_log[$time])) {
                    $time++;
                }
                $order_log[$time] = $pay['pay_platform']."回告订单 {$pay['out_trade_no']} 支付成功";
            }
        }
        foreach ($order_status_log as $status_log) {
            $time = strtotime($status_log['ctime']);
            if(isset($order_log[$time])){
                $time++;
            }
            $order_log[$time] = "{$status_log['name']} 变更订单状态 从 {$status_log['last_status']} 到 {$status_log['set_status']}";
        }
        ksort($order_log);
        $data['operation_list'] = $order_log;
        $this->load->view('weidashang/order', $data);
    }  
    /**
     * 同步支付账单
     */
    public function tools() {

        if ($_POST['start_time'] && $_POST['end_time']) {
            $common = new Common();
            for ($i = strtotime($_POST['start_time']); $i <= strtotime($_POST['end_time']); $i+=3600 * 24) {
                $result = $common->delete('md_pay_record_alipay', "trans_date LIKE '" . date("Y-m-d", $i) . "%'");
                $this->_pull(date("Y-m-d", $i));
            }
            for ($i = strtotime($_POST['start_time']); $i <= strtotime($_POST['end_time']); $i+=3600 * 24) {
                $this->_pull(date("Y-m-d", $i), 'alipay_forcard');
            }
            $this->load->library('md_payment_weixin');
            for ($i = strtotime($_POST['start_time']); $i <= strtotime($_POST['end_time']); $i+=3600 * 24) {
                $result = $common->delete('md_pay_record_weixin', "pay_time LIKE '" . date("Y-m-d", $i) . "%'");
                $datetime = date("Ymd", $i);
                $rows = $this->md_payment_weixin->bill($datetime);
                foreach ($rows as $row) {
                    $this->db->insert("md_pay_record_weixin", $row);
                }
            }
        }
        $sql = "SELECT max(trans_date) as trans_date_max,min(trans_date) as trans_date_min,count(1) as c FROM md_pay_record_alipay";
        $row = $this->db->query($sql)->row_array();
        $data['c'] = $row['c'];
        $data['trans_date_max'] = $row['trans_date_max'];
        $data['trans_date_min'] = $row['trans_date_min'];
        $data['type'] = 'tools';
        $this->load->view('weidashang/tools', $data);
    }
    /**
     * 拉取指定日期的对账单
     * @author zhewang@modian.com
     * @param type $date '2014-06-11'
     */
    public function _pull($date, $type = 'alipay_erp') {
        $path = dirname(dirname(dirname(dirname(__FILE__))));
        require(LIB_PATH . "/payment/{$type}/alipay.config.php");

        $this->_alipay_config = $alipay_config;
        $page = 1;
        $parameter = array(
            "service" => "account.page.query",
            "partner" => trim($this->_alipay_config['partner']),
            "page_no" => $page,
//            'page_size' => 5,//测试多页时用到
            "gmt_start_time" => $date . ' 00:00:00',
            "gmt_end_time" => $date . ' 23:59:59',
            "_input_charset" => trim(strtolower($this->_alipay_config['input_charset']))
        );
        $alipaySubmit = new AlipaySubmit($this->_alipay_config);
        $common = new Common();
//print_r($this->_alipay_config);
        do {
            $parameter['page_no'] = $page;
            try {
                $html_text = $alipaySubmit->buildRequestHttp($parameter);
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            $doc = new DOMDocument();
            $doc->loadXML($html_text);
            if ($doc->getElementsByTagName('is_success')->item(0)->nodeValue == 'F') {
                echo ($date . '分页' . $page . '获取失败');
                exit;
            }
            $accountQuerys = $doc->getElementsByTagName('AccountQueryAccountLogVO');
            $columName = array(
                'balance' => '0',
                'income' => '0',
                'outcome' => '0',
                'trans_date' => '',
                'sub_trans_code_msg' => '',
                'trans_code_msg' => '',
                'merchant_out_order_no' => '',
                'trans_out_order_no' => '',
                'bank_name' => '',
                'bank_account_no' => '',
                'bank_account_name' => '',
                'memo' => '',
                'buyer_account' => '',
                'seller_account' => '',
                'seller_fullname' => '',
                'currency' => '',
                'deposit_bank_no' => '',
                'goods_title' => '',
                'iw_account_log_id' => '',
                'trans_account' => '',
                'other_account_email' => '',
                'other_account_fullname' => '',
                'other_user_id' => '',
                'partner_id' => '',
                'service_fee' => '0',
                'service_fee_ratio' => '0',
                'total_fee' => '0',
                'trade_no' => '',
                'trade_refund_amount' => '0',
                'sign_product_name' => '',
                'rate' => ''
            );
            foreach ($accountQuerys as $item) {
                $newRow = array();
                foreach ($columName as $colName => $defaultValue) {
                    $newRow[$colName] = $item->getElementsByTagName($colName)->item(0)->nodeValue ? $item->getElementsByTagName($colName)->item(0)->nodeValue : $defaultValue;
                }
                // print_r($newRow);exit('23');
                $result = $common->add('md_pay_record_alipay', $newRow);
            }
            if ($doc->getElementsByTagName('has_next_page')->item(0)->nodeValue == 'F') {
                break;
            }
            $page++;
            
        } while (true);
    } 
    // 修复订单
    public function repair_order()
    {
        $if_repair = 1;

        $type = $this->input->post('repair_type', true);
        switch (intval($type)) {
            case 1: // 重复支付
            case 2: // 过期支付
                // 重复支付，注意退款回调接口会修改订单状态
                // 过期支付没有以上考虑
                $if_repair = $this->_repair_refund_order($this->input->post(null, true));
                break;
            case 3: // 摩点未收到支付成功信息
                $if_repair = $this->_update_md_pay_record($this->input->post(null, true));
                break;
            case 4: // 摩点未收到退款成功信息
                $if_repair = $this->_update_md_back_record($this->input->post(null, true));
                break;
            default:
                # code...
                break;
        }

        pack_data($this->input->post(null, true), $if_repair);
    } 
    // 修复订单::退款
    function _repair_refund_order($back_info) {
        $status = 1;
        switch ($back_info['pay_platform']) {
            case 'alipay':
            case 'alipay_wap':
                $status = $this->_repair_refund_alipay_order($back_info);
                break;
            case 'weixin_wap':
                $status = $this->_repair_refund_weixin_order($back_info);
                break;
            default:
                # code...
                break;
        }
        return $status;
    }
    // 修复订单::支付信息
    public function _update_md_pay_record($parms)
    {
        $status = 1;

        // setting
        $insert_d['ctime']        = date('Y-m-d H:i:s');
        $insert_d['repair_rsn']   = 'PAID_SUCCESS_UNSYNC';
        $insert_d['admin_id']     = $_SESSION['admin_id'];
        $insert_d['out_trade_no'] = $parms['order_no'];
        $insert_d['back_id']      = $parms['back_id'];
        $insert_d['pro_id']       = $parms['pro_id'];

        $this->db->select('md_product_back.status AS back_status, md_pay.status AS pay_status', false);
        $this->db->from('md_product_back');
        $this->db->join('md_pay', "md_product_back.id=md_pay.back_id AND md_pay.out_trade_no='{$parms['order_no']}'", 'inner');
        $this->db->where('md_product_back.id', $parms['back_id']);
        $res = $this->db->get()->row_array();
        $insert_d['last_back_status'] = intval($res['back_status']);
        $insert_d['last_pay_status'] = intval($res['pay_status']);
        $insert_d['set_back_status'] = 103;
        $insert_d['set_pay_status'] = 1;
        $if_pay = 1;

        switch ($parms['pay_platform']) {
        case 'alipay_wap':
            $sql = "UPDATE md_pay pay
                        INNER JOIN md_product_back bak ON bak.id=pay.back_id
                        INNER JOIN md_pay_record_alipay ali ON ali.merchant_out_order_no=pay.out_trade_no AND ali.income=pay.amount
                    SET pay.return_time=ali.trans_date, pay.return_str=CONCAT('修复参照:', ali.trade_no),
                        pay.status={$insert_d['set_pay_status']}, bak.if_pay={$if_pay}, bak.status={$insert_d['set_back_status']}
                    WHERE bak.id={$parms['back_id']} AND pay.out_trade_no='{$parms['order_no']}' AND ali.trade_no='{$parms['trade_no']}'";
            if ($this->db->query($sql))
                $status = 0;
            break;
        case 'weixin_wap':
            $sql = "UPDATE md_pay pay
                        INNER JOIN md_product_back bak ON bak.id=pay.back_id
                        INNER JOIN md_pay_record_weixin wx ON wx.md_trade_no=pay.out_trade_no AND wx.money=pay.amount
                    SET pay.return_time=wx.pay_time, pay.return_str=CONCAT('修复参照:', wx.md_trade_no),
                        pay.status={$insert_d['set_pay_status']}, bak.if_pay={$if_pay}, bak.status={$insert_d['set_back_status']}
                    WHERE bak.id={$parms['back_id']} AND pay.out_trade_no='{$parms['order_no']}' AND wx.wx_trade_no='{$parms['trade_no']}'";
            if ($this->db->query($sql))
                $status = 0;
            break;
        default:
            # code...
            break;
        }

        // log
        $this->db->insert('md_order_repaired_log', $insert_d);

        return $status;
    }
    // 修复订单::未同步退款成功信息
    function _update_md_back_record($back_info) {
        $status = 1;

        // setting
        $insert_d['ctime']        = date('Y-m-d H:i:s');
        $insert_d['repair_rsn']   = 'REFUND_SUCCESS_UNSYNC';
        $insert_d['admin_id']     = $_SESSION['admin_id'];
        $insert_d['out_trade_no'] = $back_info['order_no'];
        $insert_d['back_id']      = $back_info['back_id'];
        $insert_d['pro_id']       = $back_info['pro_id'];

        $this->db->select('md_product_back.status AS back_status, md_pay.status AS pay_status', false);
        $this->db->from('md_product_back');
        $this->db->join('md_pay', "md_product_back.id=md_pay.back_id AND md_pay.out_trade_no='{$back_info['order_no']}'", 'inner');
        $this->db->where('md_product_back.id', $back_info['back_id']);
        $res = $this->db->get()->row_array();
        $insert_d['last_back_status'] = intval($res['back_status']);
        $insert_d['last_pay_status'] = intval($res['pay_status']);


        $this->db->select('if_pay, status');
        $this->db->from('md_product_back');
        $this->db->where('id', $back_info['back_id']);
        $res = $this->db->get()->row_array();
        $if_pay = $res['if_pay'];
        $insert_d['set_back_status'] = $res['status'];

        switch ($insert_d['last_pay_status']) {
        case 31:
        case 35: // 重复支付退款中
            $insert_d['set_back_status'] = $insert_d['last_back_status'];
            $insert_d['set_pay_status'] = 31;
            break;
        case 39:
        case 36: // 过期支付退款中
            $insert_d['set_back_status'] = $insert_d['last_back_status'];
            $insert_d['set_pay_status'] = 39;
            break;
        default: // 正常订单退款中
            $insert_d['set_pay_status'] = $insert_d['last_pay_status'];

            $if_repeat = $this->md_refund->if_repeat_order($back_info['back_id']);
            if (! $if_repeat) {
                $if_pay = 3;
                switch ($back_info['pro_status']) {
                case '众筹失败':
                    $insert_d['set_back_status'] = '400';
                    break;
                case '众筹中':
                    $insert_d['set_back_status'] = '300';
                    break;
                case '众筹成功':
                    $insert_d['set_back_status'] = '205';
                    break;
                default:
                    $insert_d['set_back_status'] = 0;
                    break;
                }
                break;
            }
        }

        // update
        switch ($back_info['pay_platform']) {
        case 'alipay_wap':
            $sql = "UPDATE md_pay pay
                        INNER JOIN md_product_back bak ON bak.id=pay.back_id
                        INNER JOIN md_pay_record_alipay ali ON ali.merchant_out_order_no=pay.out_trade_no AND ali.income=pay.amount
                    SET pay.return_time=ali.trans_date, pay.status={$insert_d['set_pay_status']}, bak.if_pay={$if_pay}, bak.status={$insert_d['set_back_status']}
                    WHERE bak.id={$back_info['back_id']} AND pay.out_trade_no='{$back_info['order_no']}' AND ali.trade_no='{$back_info['trade_no']}'";
            if ($this->db->query($sql))
                $status = 0;
            break;
        case 'weixin_wap':
            $sql = "UPDATE md_pay pay
                        INNER JOIN md_product_back bak ON bak.id=pay.back_id
                        INNER JOIN md_pay_record_weixin wx ON wx.md_trade_no=pay.out_trade_no AND wx.money=pay.amount
                    SET pay.return_time=wx.pay_time, pay.status={$insert_d['set_pay_status']}, bak.if_pay={$if_pay}, bak.status={$insert_d['set_back_status']}
                    WHERE bak.id={$back_info['back_id']} AND pay.out_trade_no='{$back_info['order_no']}' AND wx.wx_trade_no='{$back_info['trade_no']}'";
            if ($this->db->query($sql))
                $status = 0;
            break;
        default:
            # code...
            break;
        }

        // log
        $this->db->insert('md_order_repaired_log', $insert_d);

        return $status;
    }    
    // 修复订单::退款::ali
    public function _repair_refund_alipay_order($back_info)
    {
        $rtn_stat = 2;
        if (!empty($back_info) && !empty($back_info['repair_type']) && !empty($back_info['pro_id']) && !empty($back_info['back_id'])
            && !empty($back_info['order_no']) && !empty($back_info['trade_no']) && !empty($back_info['pay_money'])) {

            if ($back_info['repair_type'] == 2) {
                $refund_reasion = '过期支付退款';
            } elseif ($back_info['repair_type'] == 1) {
                $refund_reasion = '重复支付退款';
            } else {}
            $batch_id = $this->md_refund->get_wds_next_batch_id($back_info['pro_id']);
            $parm['batch_no'] = $this->md_refund->create_next_batch_no($back_info['pro_id'], $batch_id, 'R');
            $parm['refund_date'] = date("Y-m-d H:i:s");
            $parm['batch_num'] = 1;
            $parm['detail_data'] = "{$back_info['trade_no']}^{$back_info['pay_money']}^{$refund_reasion}";

            $alipayapi_return = $this->md_refund->refund_alipayapi($parm);
            $rtn_status = $this->md_refund->get_refund_req_status($alipayapi_return['return_code']);
            if ($rtn_status == '请求成功') {
                $rtn_stat = 0;

                $ppppstat = 35;
                if ($back_info['repair_type'] == 2) { // 过期支付
                    $ppppstat = 36;
                    switch ($back_info['pro_status']) {
                        case '众筹失败':
                            $back_status = '402';
                            break;
                        case '众筹中':
                            $back_status = '302';
                            break;
                        case '众筹成功':
                            $back_status = '204';
                            break;
                        default:
                            # code...
                            break;
                    }
                }

                if ($this->md_refund->if_repeat_order($back_info['back_id'])) {
                    $this->md_refund->update_order_pay_status($back_info['back_id'], $back_info['order_no'], $ppppstat);
                } else {
                    $this->Order_biz->set_oid($back_info['back_id'])->update_status($back_status);
                }
            }

            $back_data = array('0' => $alipayapi_return + array('pro_id' => intval($back_info['pro_id']+30000000), 'batch_id' => $batch_id, 'batch_amount' => $back_info['pay_money']));
            $this->md_refund->save_wds_refund_req_log($back_data);
            $op_man = $this->md_refund->get_op_name($_SESSION['admin_id']);
            $sub_lsts[] = array('batch_no' => $parm['batch_no'],
                'back_id' => $back_info['back_id'],
                'pay_out_trade_no' => $back_info['order_no'],
                'trade_no' => $back_info['trade_no'],
                'refund_amount' => $back_info['pay_money'],
                'refund_rsn' => $refund_reasion,
                'refund_date' => $parm['refund_date'],
                'user_realname' => "",
                'user_reg_mobile' => "",
                'op_type' => 1,
                'op_reason' => "",
                'op_time' => "",
                'op_man' => "{$op_man}",
            );
            $this->md_refund->save_wds_refund_order_info($sub_lsts);
        }
        return $rtn_stat;
    }

    // 修复订单::退款::weixin
    public function _repair_refund_weixin_order($back_info)
    {
        $rtn_stat = 2;
        if (!empty($back_info) && !empty($back_info['back_id']) && !empty($back_info['repair_type']) && !empty($back_info['order_no']) && !empty($back_info['pay_money'])) {

            $err_msg = null;
            if ($this->md_payment_weixin->refund($back_info['order_no'], $back_info['pay_money'], $err_msg)) {
                $rtn_stat = 0;
                $ppppstat = 35;
                if ($back_info['repair_type'] == 2) {
                    $ppppstat = 36;
                    switch ($back_info['pro_status']) {
                        case '众筹失败':
                            $back_status = '400';
                            break;
                        case '众筹中':
                            $back_status = '300';
                            break;
                        case '众筹成功':
                            $back_status = '205';
                            break;
                        default:
                            # code...
                            break;
                    }
                }

                if ($this->md_refund->if_repeat_order($back_info['back_id'])) {
                    $this->md_refund->update_order_pay_status($back_info['back_id'], $back_info['order_no'], $ppppstat);
                } else {
                    $this->Order_biz->set_oid($back_info['back_id'])->update_status($back_status);
                }
            }
        }
        return $rtn_stat;
    }
    
}
