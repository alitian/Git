<?php

//全站数据    传入一个开始时间和结束时间，计算该时间内的平均值
function avg($stime, $etime, $arr, $num = 0) {
    $data = array('pv' => 0, 'uv' => 0, 'p/u' => 0, 'login_user' => 0, 'new_user' => 0, 'form' => 0, 'money' => 0, 'ios_new' => 0, 'ios_old' => 0, 'andriod_new' => 0, 'andriod_old' => 0);
    $num = 0;
    $start = date("Ymd", $stime);
    $start = intval($start);
    $end = date("Ymd", $etime);
    $end = intval($end);
    foreach ($arr as $k => $v) {
        if ($k >= $start && $k <= $end) {
            $num++;
            $data['pv']+=$v['pv'];
            $data['uv']+=$v['uv'];
            $data['p/u']+=round($v['pv'] / $v['uv'], 2);
            $data['login_user']+=$v['login_user'];
            $data['new_user']+=$v['new_user'];
            $data['form']+=$v['form'];
            $data['money']+=$v['money'];
            $data['ios_new']+=$v['ios_new'];
            $data['ios_old']+=$v['ios_old'];
            $data['andriod_new']+=$v['andriod_new'];
            $data['andriod_old']+=$v['andriod_old'];
        }
    }
    if($per){
        return $data;
    }else{
        foreach ($data as $k => $v) {
            if (intval($v)) {
                $data[$k] = round($v / $num, 2);
            }
        }
        return $data;
    }
}

//全站数据    实时计算当前的全站数据
function tody($ip, $port) {
    require_once('elastic/vendor/autoload.php');
    $hosts = ["{$ip}:{$port}"];
    $client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
    $arr = array();
    $start = "logstash-" . date("Y.m.d", time() - 86400);
    $end = "logstash-" . date("Y.m.d");
    $param2 = [
        "search_type" => "count",
        "index" => "{$start},{$end}",
        "body" => [
            "query" => [ "filtered" => [ "filter" => [ "range" => [ "@timestamp" => [
                                "gte" => strtotime(date("Y-m-d")) * 1000,
                                "lt" => (strtotime(date("Y-m-d")) + 86400) * 1000]]]]],
            "aggs" => [ "uv" => [ "cardinality" => [ "field" => "mdsa.raw"]]]
        ]
    ];
    $result2 = $client->search($param2);
    $arr['pv'] = $result2['hits']['total'];
    $arr['uv'] = $result2['aggregations']['uv']['value'];
    unset($param2);
    unset($result2);
    $arr['p/u'] = round($arr['pv'] / $arr['uv'], 2);

    $param3 = [
        "search_type" => "count",
        "index" => "{$start},{$end}",
        "body" => [
            "query" => [ "filtered" => [
                    "query" => [ "bool" => [ "must_not" => [ "term" => [ "mdsb" => 0]]]],
                    "filter" => [ "range" => [ "@timestamp" => [ "gte" => strtotime(date("Y-m-d")) * 1000, "lt" => (strtotime(date("Y-m-d")) + 86400) * 1000]]]]],
            "aggs" => [ "uv" => [ "cardinality" => [ "field" => "mdsb.raw"]]]
        ]
    ];
    $result3 = $client->search($param3);
    $arr['login_user'] = $result3['aggregations']['uv']['value'];
    unset($param3);
    unset($result3);
    try {
        $pdo = new PDO('mysql:host=tw1.db.modianinc.com;dbname=app_modian;port=16888;charset=utf8;', 'devroot', '7Q5oO9J8kz');
    } catch (Exception $e) {
        echo $e->getMessage();
    }
    $reslut1 = $pdo->query("select count(*) as new_user from md_users where `ctime` >= '" . date("Y-m-d", time()) . " 00:00:00' and `ctime` < '" . date("Y-m-d", time() + 86400) . " 00:00:00'");
    $reslut = $reslut1->fetch();
    $arr['new_user'] = $reslut['new_user'];

    $reslut2 = $pdo->query("select count(*) as form,sum(amount) as money from md_product_back where `ctime` >= '" . date("Y-m-d", time()) . " 00:00:00' and `ctime` < '" . date("Y-m-d", time() + 86400) . " 00:00:00' and `if_pay` = 1");
    $reslut = $reslut2->fetch();
    $arr['form'] = $reslut['form'];
    $arr['money'] = $reslut['money'];
    if (empty($arr['money'])) {
        $arr['money'] = 0;
    }
    $arr['ios_new'] = 0;
    $arr['ios_old'] = 0;
    $arr['andriod_new'] = 0;
    $arr['andriod_old'] = 0;
    return $arr;
}

//来路分析  生成一天内的外部链接，直接访问数据，未删除多余部分，多余部分在方法中处理,
//$match=0  对应mdsf字段值非md的来源域名数据；
//$match=1  对应mdsf字段值为md的来源域名数据；
//$match=2  对应生成受访域名数据，不是来源域名

define("MD", 0);
define("NO_MD", 1);
define("VISIT_DOMAIN", 2);

function sort_url($ip, $port, $start_time, $end_time, $match) {
    require_once('elastic/vendor/autoload.php');
    $hosts = ["{$ip}:{$port}"];
        $client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
        $start = "logstash-" . date("Y.m.d", $start_time - 86400);
        $end = "logstash-" . date("Y.m.d", $start_time);
        switch ($match) {
            case 0: $query = "-mdsf:md";
                break;
            case 1: $query = "mdsf:md";
                break;
            case 2: $query = "*";
                break;
        }
        $filed = "mdsff.raw";
        if ($match == 2) {
            $filed = "domain.raw";
        }
        $param = [
            "index" => "{$start},{$end}",
            "search_type" => "count",
            "body" => [
                "query" => [
                    "filtered" => [
                        "query" => [ "query_string" => [ "query" => $query, "analyze_wildcard" => true]],
                        "filter" => [ "range" => [ "@timestamp" => [ "gte" => $start_time * 1000, "lt" => $end_time * 1000]]]
                    ]
                ],
                "aggs" => [ "url" => [ "terms" => [ "field" => $filed, "order" => [ "_count" => "desc"], "size" => 0]]]
            ]
        ];
            
        $reslut = $client->search($param);
        $url = array();
        $arr = $reslut['aggregations']['url']['buckets'];
        foreach ($arr as $k => $v) {
            $url[$v['key']]['pv'] = $v['doc_count'];
            $url[$v['key']]['uv'] = 0;
            $url[$v['key']]['out'] = 0;
        }
        foreach ($url as $k => $v) {
            if($match != 2){
                if (preg_match("/.+(modian).+/", $k, $key)) {
                    unset($url[$k]);
                    continue;
                }
            }
            switch ($match) {
                case 0: $query = "-mdsf:md AND mdsff:{$k}";
                    break;
                case 1: $query = "mdsf:md AND mdsff:{$k}";
                    break;
                case 2: $query = "domain:\"{$k}\"";
                    break;
            }
            $param = [
                "index" => "{$start},{$end}",
                "search_type" => "count",
                "body" => [ "query" => [ "filtered" => [ "query" => [ "query_string" => [ "query" => $query, "analyze_wildcard" => true]],
                            "filter" => [ "range" => [ "@timestamp" => [ "gte" => $start_time * 1000, "lt" => $end_time * 1000]]]
                        ]
                    ],
                    "aggs" => [ "out" => [ "terms" => [ "field" => "mdsa.raw", "size" => 0, "order" => [ "_count" => "asc"]]]]
                ]
            ];
            $reslut = $client->search($param);
            
            $arr = $reslut['aggregations']['out']['buckets'];
            
            $url[$k]['uv'] = count($arr);
            foreach ($arr as $key => $value) {
                if ($value['doc_count'] == 1) {
                    $url[$k]['out'] ++;
                } else {
                    break;
                }
            }
        }
        foreach ($url as $k => $v) {
            $url[$k]['per'] = number_format(($v['uv'] / $v['pv']) * 100, 2) . "%";
            $url[$k]['p/u'] = round($v['pv'] / $v['uv'], 2);
            $url[$k]['per_out'] = number_format(($v['out'] / $v['uv']) * 100, 2) . "%";
        }
    //error_log(var_export($url, true)."\n".rand(10000,99999));
    return $url;
}

//来路分析   求相应时间内的总和并输出前50
function path_num($ip, $port, $i, $j, $name) {
    $url = array();
    $urls = array();
    $redis = new Redis();
    $redis->connect("{$ip}", "{$port}");
    for ($a = $i; $a <= $j; $a+=86400) {
        $log = "log_" . date("Ymd", $a);
        if ($name) {
            $log = "log_" . date("Ymd", $a) . "_domain";
        }
        $str = $redis->get($log);
        $arr = unserialize($str);
        foreach ($arr as $k => $v) {
            foreach ($v as $kk => $vv) {
                if (!isset($url[$k][$kk])) {
                    $url[$k][$kk]['pv'] = $vv['pv'];
                    $url[$k][$kk]['uv'] = $vv['uv'];
                    $url[$k][$kk]['out'] = $vv['out'];
                } else {
                    $url[$k][$kk]['pv'] += $vv['pv'];
                    $url[$k][$kk]['uv'] += $vv['uv'];
                    $url[$k][$kk]['out'] += $vv['out'];
                }
            }
        }
    }
    unset($k);
    unset($v);
    unset($kk);
    unset($vv);
    foreach ($url as $key => $value) {
        foreach ($value as $keys => $values) {
            $pv[$keys] = $values['pv'];
        }
        array_multisort($pv, SORT_DESC, $value);
        $url[$key] = $value;
        unset($pv);
    }

    foreach ($url as $k => $v) {
        $num = 0;
        foreach ($v as $kk => $vv) {
            $num++;
            $urls[$k][$kk] = $vv;
            if ($num == 50) {
                break;
            }
        }
    }
    unset($k);
    unset($v);
    unset($kk);
    unset($vv);
    foreach ($urls as $k => $v) {
        foreach ($v as $kk => $vv) {
            $urls[$k][$kk]['per'] = number_format(($vv['uv'] / $vv['pv']) * 100, 2) . "%";
            $urls[$k][$kk]['p/u'] = round($vv['pv'] / $vv['uv'], 2);
            $urls[$k][$kk]['per_out'] = number_format(($vv['out'] / $vv['uv']) * 100, 2) . "%";
        }
    }
    return $urls;
}

//来路分析   今天的所有数据
function path_tody($ip, $port) {
    $i = strtotime(date("Y-m-d", time()));
    $a = sort_url($ip, $port, $i, $i + 86400, 0);
    $b = sort_url($ip, $port, $i, $i + 86400, 1);
    $c = no_domain($ip, $port, $i, $i + 86400);
    $path = array(0 => "www_baidu_com", 1 => "www_google_com", 2 => "www_sogou_com", 3 => "www_so360_com", 4 => "www_haosou_com", 5 => "www_bing_com", 6 => "www_sma_so");
    foreach ($path as $k => $v) {
        $url['search'][$v] = array('pv' => 0, 'uv' => 0, 'per' => "0.00%", 'p/u' => 0, 'out' => 0, 'per_out' => "0.00%");
        if (isset($a[$v])) {
            $url['search'][$v]['pv'] += $a[$v]['pv'];
            $url['search'][$v]['uv'] += $a[$v]['uv'];
            $url['search'][$v]['out'] += $a[$v]['out'];
            unset($a[$v]);
        }
        if (isset($b[$v])) {
            $url['search'][$v]['pv'] += $b[$v]['pv'];
            $url['search'][$v]['uv'] += $b[$v]['uv'];
            $url['search'][$v]['out'] += $b[$v]['out'];
            unset($b[$v]);
        }
    }
    foreach ($url['search'] as $k => $v) {
        if ($v['pv'] != 0 && $v['uv'] != 0) {
            $url['search'][$k]['per'] = number_format(($v['uv'] / $v['pv']) * 100, 2) . "%";
            $url['search'][$k]['p/u'] = round($v['pv'] / $v['uv'], 2);
            $url['search'][$k]['per_out'] = number_format(($v['out'] / $v['uv']) * 100, 2) . "%";
        }
    }

    $num = 0;
    foreach ($a as $k => $v) {
        $num++;
        $url['external'][$k] = $v;
        if ($num == 50) {
            break;
        }
    }
    $num = 0;
    foreach ($b as $k => $v) {
        $num++;
        $url['interview'][$k] = $v;
        if ($num == 50) {
            break;
        }
    }
    $url['unkown']['no_domain'] = $c;
    return $url;
}

//来路分析   生成未知来源的数据
function no_domain($ip, $port, $start_time, $end_time) {
    require_once('elastic/vendor/autoload.php');
    $hosts = ["{$ip}:{$port}"];
    $client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
    $start = "logstash-" . date("Y.m.d", $start_time - 86400);
    $end = "logstash-" . date("Y.m.d", $start_time);
    $param = [
        "index" => "{$start},{$end}",
        "search_type" => "count",
        "body" => [
            "query" => [
                "filtered" => [
                    "query" => [ "match_all" => []],
                    "filter" => ["range" => [ "@timestamp" => [ "gte" => $start_time * 1000, "lt" => $end_time * 1000]]]
                ]
            ],
            "aggs" => [
                "unkown" => [
                    "missing" => [ "field" => "mdsff"],
                    "aggs" => [ "out" => [ "terms" => [ "field" => "mdsa.raw", "order" => [ "_count" => "asc"], "size" => 0]]]
                ]
            ]
        ]
    ];
    $reslut = $client->search($param);
    $url = array();
    $url['pv'] = $reslut['aggregations']['unkown']['doc_count'];
    $arr = $reslut['aggregations']['unkown']['out']['buckets'];
    $url['uv'] = count($arr);
    $url['out'] = 0;
    foreach ($arr as $k => $v) {
        if ($v['doc_count'] == 1) {
            $url['out'] ++;
        } else {
            break;
        }
    }
    $url['per'] = number_format(($url['uv'] / $url['pv']) * 100, 2) . "%";
    $url['p/u'] = round($url['pv'] / $url['uv'], 2);
    $url['per_out'] = number_format(($url['out'] / $url['uv']) * 100, 2) . "%";
    return $url;
}

function Data_statistics($arr, $ip, $port){
    $redis = new Redis();
    $redis -> connect("{$ip}","{$port}");
    $shuzu = array();
    $num = 0;
    $month_old = date("m",1428940800);
    $data = array('pv' => 0, 'uv' => 0, 'p/u' => 0, 'login_user' => 0, 'new_user' => 0, 'form' => 0, 'money' => 0, 'ios_new' => 0, 'ios_old' => 0, 'andriod_new' => 0, 'andriod_old' => 0);
   
    for ($i = 1428940800; $i <= time() - 7200; $i += 86400) {
        $kk = intval(date("Ymd",$i));
        if (isset($arr[$kk])) {
            $num++;
            $data['pv']+=$arr[$kk]['pv'];
            $data['uv']+=$arr[$kk]['uv'];
            $data['p/u']+=$arr[$kk]['p/u'];
            $data['login_user']+=$arr[$kk]['login_user'];
            $data['new_user']+=$arr[$kk]['new_user'];
            $data['form']+=$arr[$kk]['form'];
            $data['money']+=$arr[$kk]['money'];
            $data['ios_new']+=$arr[$kk]['ios_new'];
            $data['ios_old']+=$arr[$kk]['ios_old'];
            $data['andriod_new']+=$arr[$kk]['andriod_new'];
            $data['andriod_old']+=$arr[$kk]['andriod_old'];
        }
        $month_new = date("m",$i+86400);
        if($month_old != $month_new){
            $month_old = $month_new;
            foreach ($data as $k => $v) {
                $data[$k] = round($v / $num, 2);
            }
            $key = intval(date("Ym",$i));
            $shuzu[$key] = $data;
            $num = 0;
            unset($data);
            $data = array('pv' => 0, 'uv' => 0, 'p/u' => 0, 'login_user' => 0, 'new_user' => 0, 'form' => 0, 'money' => 0, 'ios_new' => 0, 'ios_old' => 0, 'andriod_new' => 0, 'andriod_old' => 0);
        }
    }
    $str = serialize($shuzu);
    $out = $redis->set("avg_month", $str);
    $data = array('pv' => 0, 'uv' => 0, 'p/u' => 0, 'login_user' => 0, 'new_user' => 0, 'form' => 0, 'money' => 0, 'ios_new' => 0, 'ios_old' => 0, 'andriod_new' => 0, 'andriod_old' => 0);
    foreach ($shuzu as $k => $v) {
        foreach ($v as $key => $value) {
            if ($data[$key] < $value) {
                $data[$key] = $value;
            }
        }
    }
    $str = serialize($data);
    $out = $redis->set("max_month", $str);
}
